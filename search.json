[{"title":"SpringBoot系列(1)——AOP-入门","url":"/2020/12/28/SpringBoot/SpringBoot系列(1)——AOP-入门/","content":"\n## 摘要\n\n* aop关键词\n* spring aop小demo\n\n<!--more-->\n\n## 概念\n\n> 使用场景：与业务无关的且经常使用到的公共功能如鉴权，日志，性能优化，事务，错误处理，资源池，同步，审计，幂等等\n\n>  优点：降低耦合度，易扩展，高复用\n>\n>  实现方式：静态代理(AspectJ) + 动态代理（CGlib/Jdk）\n\n### aop关键词\n\n- **连接点(Joinpoint)**  连接点就是增强的实现\n- **切点(PointCut)**就是那些需要应用切面的方法 \n- **增强(Advice)** \n  - **前置通知(before)**\n  - **后置通知(after)**\n  - **异常通知(afterThrowing)**\n  - **返回通知(afterReturning)**\n  - **环绕通知(around)**\n- **目标对象(Target)**\n- **织入(Weaving)**添加到对目标类具体连接点上的过程。\n- **代理类(Proxy)** 一个类被AOP织入增强后，就产生了一个代理类。\n- **切面(Aspect）** 切面由切点和增强组成，它既包括了横切逻辑的定义，也包括了连接点的定义\n![](http://assets.processon.com/chart_image/5fec99ba7d9c0863d3ffd467.png)\n## Spring aop测试\n\n### pom\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.3.5.RELEASE</version>\n    <relativePath/>\n</parent>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-aop</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n```\n\n### aspect\n\n```java\n@Component\n@Aspect \npublic class DemoAspect {\n\n\n    //切入点1：匹配xxx类下的方法名以demo开头、参数类型为int的public方法\n    @Pointcut(\"execution(public * com.bothsavage.service.DemoService.demo*(int))\")\n    public void matchCondition() {}\n\n    //切入点2：匹配xxx类下的方法名以demo开头、参数类型为long的public方法\n    @Pointcut(\"execution(public * com.bothsavage.service.DemoService.demo1*(long))\")\n    public void matchCondition_() {}\n\n    //前置\n    @Before(\"matchCondition()\")\n    public void before() {\n        System.out.println(\"Before\");\n    }\n\n    //全局后置\n    @After(\"matchCondition()\")\n    public void after(){\n        System.out.println(\"after\");\n    }\n\n    //返回后置\n    @AfterReturning(\"matchCondition()\")\n    public void afterReturning(){\n        System.out.println(\"afterReturning\");\n    }\n\n    //抛出后置\n    @AfterThrowing(\"matchCondition()\")\n    public void afterThrowing(){\n        System.out.println(\"afterThrowing\");\n    }\n\n    @Around(\"matchCondition_()\")\n    public Object around(ProceedingJoinPoint joinPoint) {\n        Object result = null;\n        System.out.println(\"before\");\n        try{\n            result = joinPoint.proceed(joinPoint.getArgs());//获取参数\n            System.out.println(\"after\");\n        } catch (Throwable e) {\n            System.out.println(\"after exception\");\n            e.printStackTrace();\n        } finally {\n            System.out.println(\"finally\");\n        }\n        return result;\n    }\n\n}\n```\n\n### service\n\n```java\n@Service\npublic class DemoService {\n\n    public void demo(int arg1){\n        System.out.println(arg1);\n    }\n\n    public void demo1(long arg1){\n        System.out.println(arg1);\n    }\n    \n}\n```\n\n\n\n### test\n\n```java\n@SpringBootTest\npublic class DemoServiceTest {\n    \n    @Autowired\n    DemoService demoService;\n\n    //测试单独四个\n    @Test\n    public void testDemo1(){\n        demoService.demo(1);\n    }\n    \n    //测试around\n    @Test\n    public void testDemo2(){\n        demoService.demo1(1L);\n    }\n}\n```\n\n## 参考\n\n[1].[Spring AOP——简单粗暴，小白教学](https://blog.csdn.net/qq_41981107/article/details/87920537)\n\n[2].[CGLib动态代理](https://www.cnblogs.com/wyq1995/p/10945034.html)\n\n[3].[关于 Spring AOP (AspectJ) 你该知晓的一切](https://zhuanlan.zhihu.com/p/25522841)\n\n[4].[Spring AOP用法详解](https://www.cnblogs.com/liantdev/p/10125284.html)\n","tags":["Spring Boot","aop","demo"],"categories":["Spring Boot"]},{"title":"Gitee图床+typora&notion+snipaste","url":"/2020/12/26/杂项/Gitee图床+typora&notion+snipaste/","content":"## 摘要\n* 软件的下载地址\n* 配置PicGo图床，把gitee作为图床\n* markdown软件typora，notion1简介\n* 截图软件snipaste快速配合PicGo\n\n <!--more--> \n\n> tips: 以下{$xxx}均为用户自定义\n\n## 软件下载\n\n> [1].[图床软件PicGo](https://molunerfinn.com/PicGo/)\n>\n> [2].[typota](https://typora.io/)\n>\n> [3].[notion](https://www.notion.so/)\n>\n> [4].[snipaste](https://www.snipaste.com/)\n\n## 使用\n\n### typora,notion\n\ntypora和notion都是支持Markdown语法的文档编辑器，但是notion支持更多的功能，比如生成如下形式的文档\n\n![](https://gitee.com/BothSavage/PicGo/raw/master/image/20201226130027.png)\n\n### picgo\n\n所谓图床工具，就是自动把本地图片转换成链接的一款工具，网络上有很多图床工具，就目前使用种类而言，PicGo 算得上一款比较优秀的图床工具。它是一款用 `Electron-vue` 开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，imgur 等8种常用图床，功能强大，简单易用\n\n> 推荐使用gitee，因为github访问不稳定\n\n- 直接搜索gitee在PicG的插件界面，安装picgo-plugin-gitee-uploader\n- 对应填好如下属性\n\n- - 其中repo为**用户名/仓库名**\n  - branch默认为master\n  - token的获取方法在下面\n  - path为子文件为目录\n\n- ![](https://gitee.com/BothSavage/PicGo/raw/master/image/1602233669972-05e582dc-5379-4b2b-ac8d-4ecb1789093c.png)\n\n### snipaste\n\n这是一款强大的截图工具，默认热键为F1，截图完成后点击右下角复制到剪切板，再使用图床的默认热键，快速完成图片上传\n\n![](https://gitee.com/BothSavage/PicGo/raw/master/image/20201226131235.png)\n\n## 参考\n\n[1].[Typora 完全使用详解](https://sspai.com/post/54912/)\n\n[2].[PicGo图床使用](https://www.yuque.com/u2063760/xbfae1/mipufs)\n\n\n\n\n\n","tags":["工具","图床","git"],"categories":["杂项"]},{"title":"Hexo结合Stun静态博客搭建从入门到入土","url":"/2020/12/19/杂项/Hexo结合Stun静态博客搭建从入门到入土 - 副本/","content":"## 摘要\n* 安装npm，安装hexo相关依赖，安装主题stun\n* 修改hexo配置，修改stun配置，部署到github，gitee实现静态访问\n* 给博客加上全局搜索，访问量统计\n* hexo博客编写模板\n\n <!--more--> \n\n> tips: 以下{$xxx}均为用户自定义\n\n## 搭建环境\n\n### 创建仓库\n\n1.github\n\n> 仓库命名为：{$你的ID}.github.io\n\n2.gitee\n\n> 仓库命名为：{$你的ID}  \n\n***仓库名大小写一致，访问路径也是***\n\n### 环境安装\n\n1.安装npm\n\n> https://nodejs.org/en/download/\n\n2.安装cnpm\n\n```\nnpm install cnpm\n```\n\n3.安装博客搭建框架hexo\n\n```\ncnpm install -g hexo-cli\n```\n\n4.新建一个文件夹，并且之后所有操作都基于该文件夹\n\n```\nmkdir {$xxx}\ncd {$xxx}\n```\n\n5.安装依赖，下载主题\n\n```\ncnpm install --save hexo-deployer-git \ncnpm install --save hexo-render-pug\ncnpm install --save hexo-generator-search \ngit clone https://github.com/liuyib/hexo-theme-stun.git themes/stun\n```\n\n6.增加页面导航\n\n```\nhexo new page categories\nhexo new page tags\n```\n\n> 项目目录/source/categories/index.md  加上\n>\n> ```\n> type: categories\n> ```\n>\n> 项目目录/source/tags/index.md  加上\n>\n> ```\n> type: tags\n> ```\n\n### 修改配置文件\n\n1.修改部署文件夹下/_config.yml（挑选重要部分修改）\n\n```\n#展示设置\ntitle: {$自定义文字}\nlanguage: zh-CN \nurl: {$博客地址}\n\n#主题\ntheme: stun\n\n#git相关\ndeploy:\n  type: git\n  repo: \n  \tgithub: {$你的博客仓库}\n  \tgitee: {$你的博客仓库}\n  branch: master\n\n#搜索相关\nsearch:\n  path: search.json\n  field: post\n  content: true\n```\n\n2.修改部署文件夹下/themes/stun/_config.yml(挑选重要部分修改)\n\n```\n#取消导航栏注释（注意空格对齐）\nmenu:\n  categories: /categories/ || fas fa-layer-group\n  tags: /tags/ || fas fa-tags\n  \n#更改图标(最好使用链接地址，我这里使用的图床，图床使用见下一篇博客)\nfavicon:\n  small: https://gitee.com/BothSavage/PicGo/raw/master/image/favicon-16x16.png\n  medium: https://gitee.com/BothSavage/PicGo/raw/master/image/favicon-32x32.png\n\n#更改背景大图\nheader:\n  bg_image:\n    enable: true\n    url: https://gitee.com/BothSavage/PicGo/raw/master/image/背景.png\n\n#更改头像大图，并设为圆形\nauthor:\n  avatar:\n    url: https://gitee.com/BothSavage/PicGo/raw/master/image/头像.png\n    rounded: true\n    \n#打开访问统计\nbusuanzi:\n  enable: true\n  \n#打开搜索功能\nlocal_search:\n  enable: true\n\n```\n\n### 运行\n\n1.基础命令\n\n```\nhexo c  #清理一下\nhexo g  #生成\nhexo s  #部署到本地4000端口\nhexo d  #部署到远程Github仓库\n```\n\n2.推荐命令\n\n```\n#第一次尝试本地是否能访问\nhexo c  && hexo g && hexo s\n#以后每次添加文章\nhexo c  && hexo g && hexo d\n```\n\n### 博客文件存放地点\n\n> 项目目录/source/_posts\n\n## markdown文件规范\n\n1.文章元数据\n\n```\n#分别指定文章标题，时间，类别，标签\n---\ntitle: Hexo结合Stun静态博客搭建从入门到入土\ndate: 2020-12-19  20:40:11\ncategories:\n- 杂项\ntags:\n- 前端\n- 建站\n---\n```\n\n2.主页不显示文章全部\n\n```\n 上面是显示内容\n <!--more--> \n```\n\n## 其他高级功能\n\nstun主题支持\n\n* 评论系统\n* 站长工具\n* 数据公式\n* 网站特效\n* ................\n\n详情请查看\n\nhttps://theme-stun.github.io/docs/zh-CN/\n\n## 参考\n\n[1].[菜鸟教程：NodeJS安装配置](https://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n[2].[Stun主题指南](https://theme-stun.github.io/docs/zh-CN/)\n\n[3].[静态博客搭建](https://www.yuque.com/u2063760/xbfae1/gf45k1)\n\n[4].[_more截断文章_多标签添加](https://blog.csdn.net/Aoman_Hao/article/details/79291741)\n\n[5].[在gitee上部署静态网站（或者个人博客）](https://blog.csdn.net/zhangyu4863/article/details/80473412)\n\n","tags":["前端","建站"],"categories":["杂项"]},{"title":"Hello World","url":"/1920/06/25/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]